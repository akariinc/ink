"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[390],{"./.src/storybook/storybook_admin/lib/storybook/shared/ui/icons/icons.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>icons_stories,letterIcons:()=>letterIcons,paintIcons:()=>paintIcons,pictureIcons:()=>pictureIcons,strokeIcons:()=>strokeIcons});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),http=__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),sample_data_sets=__webpack_require__("./.src/storybook/storybook_admin/lib/storybook/shared/sample-data-sets.ts");let IconsComponent=class IconsComponent{constructor(samples,baseHref){this.samples=samples,this.baseHref=baseHref,this.view="stroke-icons"}imageUrl(path){return`${this.baseHref.replace(/\/$/,"")}${path}`}randomImage(){const len=this.samples.PICTURE_ICONS.length,index=Math.floor(Math.random()*len),path=this.samples.PICTURE_ICONS[index];return console.log(len,index,path),this.imageUrl(path)}concat(a,b){return{...a,...b}}ngOnInit(){}getTooltip(...classes){return`<div class="bg-dark chip-s fixed-container h-gap-s h-layout">\n            \x3c!--\n            <div stroke-icon icon="search" class="fg-dark xs stroke-icon">\n                <svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">\n                    <ellipse cx="10" cy="10" rx="6" ry="6" transform="rotate(-90 10 10)"></ellipse>\n                    <path d="M14.5 14.5L20 20" stroke-linecap="round" stroke-linejoin="round"></path>\n                </svg>\n            </div>\n            --\x3e\n            <div class="fg-dark mono-small single-line">${classes.join("<br>")}</div>\n        </div>`}static{this.ctorParameters=()=>[{type:sample_data_sets.e},{type:String,decorators:[{type:core.Inject,args:[common.APP_BASE_HREF]}]}]}static{this.propDecorators={view:[{type:core.Input}]}}};IconsComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"[icons-component]",changeDetection:core.ChangeDetectionStrategy.OnPush,template:'<div class="layout styleguide-page">\n    <h1 class="single-line sans-large-bold h50 mb50">Icons</h1>\n    <ng-container *ngIf="view === \'stroke-icons\'">\n        <div stroke-icons-component class="v-layout m20"></div>\n    </ng-container>\n\n    <ng-container *ngIf="view === \'paint-icons\'">\n        <div paint-icons-component class="v-layout m20"></div>\n    </ng-container>\n\n    <ng-container *ngIf="view === \'letter-icons\'">\n        <div letter-icons-component class="v-layout m20"></div>\n    </ng-container>\n\n    <ng-container *ngIf="view === \'picture-icons\'">\n        <div picture-icons-component class="v-layout m20"></div>\n    </ng-container>\n</div>'}),(0,tslib_es6.Sn)("design:paramtypes",[sample_data_sets.e,String])],IconsComponent);let LetterIconsComponent=class LetterIconsComponent{constructor(samples,baseHref){this.samples=samples,this.baseHref=baseHref}getArrayForPercentageDivided(percent){return Array.from({length:Math.floor(100/percent)}).fill(0).map(((_,i)=>i))}getArrayWithLength(n){return Array.from({length:n}).fill(0).map(((_,i)=>i))}imageUrl(path){return`${this.baseHref.replace(/\/$/,"")}${path}`}randomImage(){const len=this.samples.PICTURE_ICONS.length,index=Math.floor(Math.random()*len),path=this.samples.PICTURE_ICONS[index];return console.log(len,index,path),this.imageUrl(path)}concat(a,b){return{...a,...b}}ngOnInit(){}getTooltip(classList,classObj){return`<div class="bg-dark chip-s fixed-container h-gap-s h-layout">\n            <div class="fg-dark mono-small single-line">${[...classList,...Object.entries(classObj).filter((([_,v])=>v)).map((([k,_])=>k))].map((c=>`.${c}`)).join(" ")}</div>\n        </div>`}static{this.ctorParameters=()=>[{type:sample_data_sets.e},{type:String,decorators:[{type:core.Inject,args:[common.APP_BASE_HREF]}]}]}};LetterIconsComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"[letter-icons-component]",changeDetection:core.ChangeDetectionStrategy.OnPush,template:"<h3 class=\"single-line sans-large mb20\">Letter Icons</h3>\n<p class=\"mono-medium\">Icons drawn only by letter. Numeric values should expand its size up to the length of the letters.</p>\n\n<div class=\"flex-container v-layout\">\n    <ng-container *ngTemplateOutlet=\"lettersByShape; context: { $implicit: { 'circle': true, 'bg-dark': true, 'fg-dark': true } }\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"lettersByShape; context: { $implicit: { 'circle': true, 'bg-a': true, 'fg': true } }\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"lettersByShape; context: { $implicit: { 'rect': true, 'bg-dark': true, 'fg-dark': true } }\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"lettersByShape; context: { $implicit: { 'rect': true, 'bg-a': true, 'fg': true } }\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"lettersByShape; context: { $implicit: { 'bg-dark': true, 'fg-dark': true} }\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"lettersByShape; context: { $implicit: { 'bg-a': true, 'fg': true} }\"></ng-container>\n</div>\n\n<div class=\"flex-container v-layout\">\n    <ng-container *ngTemplateOutlet=\"strokeIcons; context: { $implicit: { 'xl': true, background: false, circle: false, 'rect': false, fg: true } }\"></ng-container>\n</div>\n\n<h4 class=\"single-line sans-medium mb20\">How stroke icon scales by sizes</h4>\n<div class=\"flex-container v-layout\">\n    <div class=\"fixed-container\">\n        <div class=\"specimen-container w16p h250\">\n            <div class=\"specimen align-center justify-center v-layout v-gap-l\"\n                *ngFor=\"let size of ['xxl', 'xl', 'l', 'm', 's', 'xs']\">\n                <div stroke-icon [icon]=\"'mic'\" [size]=\"size\" [ngClass]=\"classes\" class=\"{{ size }}\"></div>\n                <p class=\"fg sans-small single-line\">{{ size }}</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n<h4 class=\"single-line sans-medium mb20\">Style variations</h4>\n<p class=\"mono-medium\">Size \"xl\" with various classes.</p>\n<div class=\"flex-container v-layout\">\n    <div class=\"fixed-container\">\n        <div class=\"specimen-container w150 h150\">\n            <div class=\"specimen align-center justify-center v-layout v-gap-l\"\n                *ngFor=\"let style of ['', 'background circle bg-dark-a fg-dark', 'border circle fg', 'background rect bg-b fg', 'border rect fg']\">\n                <div stroke-icon [icon]=\"'search'\" [size]=\"'xl'\" [ngClass]=\"style\" class=\"xl\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<ng-template #lettersByShape let-classes>\n    <ng-container\n        *ngFor=\"let letter of ['Y', '&', 'AZ', 'dj']\">\n        <div class=\"fixed-container\">\n            <div class=\"specimen-container w100 h100\">\n                <ng-container\n                    *ngFor=\"let size of ['xs', 's', 'm', 'l', 'xl']\">\n                    <ng-container\n                    *ngFor=\"let fontStyle of ['mono-small', 'serif-small', 'sans-small', 'mono-small-bold', 'serif-small-bold', 'sans-small-bold', 'mono-medium', 'serif-medium', 'sans-medium', 'mono-medium-bold', 'serif-medium-bold', 'sans-medium-bold', 'mono-large-bold', 'serif-large', 'sans-large', 'mono-large-bold', 'serif-large-bold', 'sans-large-bold']\">\n                        <ng-container *ngTemplateOutlet=\"letterIcon; context: { $implicit: { letter: letter, classes: classes, size: size, fontStyle: fontStyle } }\"></ng-container>\n                    </ng-container>\n                </ng-container>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container\n        *ngFor=\"let letter of ['5', '125']\">\n        <div class=\"fixed-container\">\n            <div class=\"specimen-container w100 h100\">\n                <ng-container\n                    *ngFor=\"let size of ['xs', 's', 'm', 'l', 'xl']\">\n                    <ng-container\n                    *ngFor=\"let fontStyle of ['mono-small', 'serif-small', 'sans-small', 'mono-small-bold', 'serif-small-bold', 'sans-small-bold', 'mono-medium', 'serif-medium', 'sans-medium', 'mono-medium-bold', 'serif-medium-bold', 'sans-medium-bold', 'mono-large-bold', 'serif-large', 'sans-large', 'mono-large-bold', 'serif-large-bold', 'sans-large-bold']\">\n                        <ng-container *ngTemplateOutlet=\"letterIcon; context: { $implicit: { letter: letter, classes: concat(classes, { expands: true }), size: size, fontStyle: fontStyle } }\"></ng-container>\n                    </ng-container>\n                </ng-container>\n            </div>\n        </div>\n    </ng-container>\n</ng-template>\n\n<ng-template #letterIcon let-obj>\n    <div class=\"specimen align-center justify-center w100 h100\"\n        [matTooltip]=\"getTooltip(['letter-icon', obj.size, obj.fontStyle, 'single-line'], obj.classes)\">\n        <div class=\"letter-icon {{ obj.size }} single-line {{ obj.fontStyle }}\" [ngClass]=\"obj.classes\">{{ obj.letter }}</div>\n    </div>\n</ng-template>\n"}),(0,tslib_es6.Sn)("design:paramtypes",[sample_data_sets.e,String])],LetterIconsComponent);let PaintIconsComponent=class PaintIconsComponent{constructor(samples,baseHref){this.samples=samples,this.baseHref=baseHref}getArrayForPercentageDivided(percent){return Array.from({length:Math.floor(100/percent)}).fill(0).map(((_,i)=>i))}getArrayWithLength(n){return Array.from({length:n}).fill(0).map(((_,i)=>i))}imageUrl(path){return`${this.baseHref.replace(/\/$/,"")}${path}`}randomImage(){const len=this.samples.PICTURE_ICONS.length,index=Math.floor(Math.random()*len),path=this.samples.PICTURE_ICONS[index];return console.log(len,index,path),this.imageUrl(path)}concat(a,b){return{...a,...b}}ngOnInit(){}getTooltip(iconName,classesObj){return`<div class="bg-dark chip-s fixed-container h-gap-s h-layout">\n            <div class="fg-dark mono-small single-line">.${iconName} ${Object.entries(classesObj).filter((([_,value])=>value)).map((([key,_])=>key)).map((c=>`.${c}`)).join(" ")}</div>\n        </div>`}static{this.ctorParameters=()=>[{type:sample_data_sets.e},{type:String,decorators:[{type:core.Inject,args:[common.APP_BASE_HREF]}]}]}};PaintIconsComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"[paint-icons-component]",changeDetection:core.ChangeDetectionStrategy.OnPush,template:'<h3 class="single-line sans-large mb20">Paint Icons</h3>\n<p class="mono-medium">Some icons are provided as painted (not stroke)</p>\n\n<div class="flex-container v-layout">\n    <div class="specimen-container w100 h150">\n        <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xl\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n        <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xl\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n        <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xl\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n        <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xl\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n        <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xl\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n    </div>\n</div>\n\n\n<ng-template #paintIcons let-classes>\n    <div class="specimen align-center justify-center"\n        *ngFor="let iconName of samples.PAINT_ICONS"\n        [matTooltip]="getTooltip(iconName, classes)">\n        <div paint-icon [icon]="iconName" [ngClass]="classes"></div>\n    </div>\n</ng-template>\n'}),(0,tslib_es6.Sn)("design:paramtypes",[sample_data_sets.e,String])],PaintIconsComponent);let PictureIconsComponent=class PictureIconsComponent{constructor(samples,baseHref){this.samples=samples,this.baseHref=baseHref}getArrayForPercentageDivided(percent){return Array.from({length:Math.floor(100/percent)}).fill(0).map(((_,i)=>i))}getArrayWithLength(n){return Array.from({length:n}).fill(0).map(((_,i)=>i))}imageUrl(path){return`${this.baseHref.replace(/\/$/,"")}${path}`}randomImage(){const len=this.samples.PICTURE_ICONS.length,index=Math.floor(Math.random()*len),path=this.samples.PICTURE_ICONS[index];return console.log(len,index,path),this.imageUrl(path)}concat(a,b){return{...a,...b}}ngOnInit(){}getTooltip(classes){return`<div class="bg-dark chip-s fixed-container h-gap-s h-layout">\n            <div class="fg-dark mono-small single-line">${classes.map((c=>`.${c}`)).join(" ")}</div>\n        </div>`}static{this.ctorParameters=()=>[{type:sample_data_sets.e},{type:String,decorators:[{type:core.Inject,args:[common.APP_BASE_HREF]}]}]}};PictureIconsComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"[picture-icons-component]",changeDetection:core.ChangeDetectionStrategy.OnPush,template:'<h3 class="single-line sans-large mb20">Picture Icons</h3>\n<p class="mono-medium">Icons with picture.</p>\n\n<div class="flex-container v-layout">\n    <div class="fixed-container">\n        <div class="specimen-container w20p h100">\n            <ng-container\n            *ngFor="let sample of samples.PICTURE_ICONS">\n                <ng-container\n                    *ngFor="let shape of samples.ICON_SHAPES">\n                    <ng-container\n                        *ngFor="let size of samples.ICON_SIZES">\n                        <div class="specimen align-center justify-center"\n                            [matTooltip]="getTooltip(shape ? [shape, size, \'picture-icon\', \'fg-dark-a\'] : [size, \'picture-icon\', \'fg-dark-a\'])">\n                            <div class="picture-icon {{shape}} {{size}} fg-dark-a">\n                                <picture okraImage [src]="imageUrl(sample)"></picture>\n                            </div>\n                        </div>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </div>\n    </div>\n</div>\n'}),(0,tslib_es6.Sn)("design:paramtypes",[sample_data_sets.e,String])],PictureIconsComponent);var storybook_shared_module=__webpack_require__("./.src/storybook/storybook_admin/lib/storybook/shared/storybook-shared.module.ts");let StrokeIconsComponent=class StrokeIconsComponent{constructor(samples,baseHref){this.samples=samples,this.baseHref=baseHref}getArrayForPercentageDivided(percent){return Array.from({length:Math.floor(100/percent)}).fill(0).map(((_,i)=>i))}getArrayWithLength(n){return Array.from({length:n}).fill(0).map(((_,i)=>i))}imageUrl(path){return`${this.baseHref.replace(/\/$/,"")}${path}`}randomImage(){const len=this.samples.PICTURE_ICONS.length,index=Math.floor(Math.random()*len),path=this.samples.PICTURE_ICONS[index];return console.log(len,index,path),this.imageUrl(path)}concat(a,b){return{...a,...b}}ngOnInit(){}getTooltip(classes){return`<div class="bg-dark chip-s fixed-container h-gap-s h-layout">\n            \x3c!--\n            <div stroke-icon icon="search" class="fg-dark xs stroke-icon">\n                <svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">\n                    <ellipse cx="10" cy="10" rx="6" ry="6" transform="rotate(-90 10 10)"></ellipse>\n                    <path d="M14.5 14.5L20 20" stroke-linecap="round" stroke-linejoin="round"></path>\n                </svg>\n            </div>\n            --\x3e\n            <div class="fg-dark mono-small single-line">${classes.map((c=>`.${c}`)).join(" ")}</div>\n        </div>`}static{this.ctorParameters=()=>[{type:sample_data_sets.e},{type:String,decorators:[{type:core.Inject,args:[common.APP_BASE_HREF]}]}]}};StrokeIconsComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"[stroke-icons-component]",changeDetection:core.ChangeDetectionStrategy.OnPush,template:'<h3 class="single-line sans-large mb20">Stroke Icons</h3>\n<p class="mono-medium">Icons drawn only by stroke. This icon fits to any size by maintaining its line thickness.</p>\n<div class="flex-container v-layout">\n    <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xl\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n</div>\n\n<h4 class="single-line sans-medium mb20">How stroke icon scales by sizes</h4>\n<div class="flex-container v-layout">\n    <div class="fixed-container">\n        <div class="specimen-container w16p h250">\n            <div class="specimen align-center justify-center v-layout v-gap-l"\n                *ngFor="let size of [\'xxl\', \'xl\', \'l\', \'m\', \'s\', \'xs\']">\n                <div stroke-icon [icon]="\'mic\'" [size]="size" [ngClass]="classes" class="{{ size }}"></div>\n                <p class="fg sans-small single-line">{{ size }}</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n<h4 class="single-line sans-medium mb20">Style variations</h4>\n<p class="mono-medium">Set style with various classes.</p>\n<div class="flex-container v-layout">\n    <div class="fixed-container">\n        <div class="specimen-container w150 h150">\n            <div class="specimen align-center justify-center v-layout v-gap-l"\n                *ngFor="let style of [\'xl\', \'xl background circle bg-dark-a fg-dark\', \'xl border circle fg\', \'xl background rect bg-b fg\', \'xl border rect fg\']"\n                [matTooltip]="getTooltip(style.split(\' \'))">\n                <div stroke-icon [icon]="\'search\'" [size]="\'xl\'" [ngClass]="style"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<ng-template #strokeIcons let-classes>\n    <div class="fixed-container">\n        <div class="specimen-container w150 h150">\n            <div class="specimen align-center justify-center v-layout v-gap-l"\n                *ngFor="let iconName of samples.STROKE_ICONS">\n                <div stroke-icon [icon]="iconName" [ngClass]="classes"></div>\n                <p class="fg sans-small single-line">{{ iconName }}</p>\n            </div>\n        </div>\n    </div>\n</ng-template>\n\n'}),(0,tslib_es6.Sn)("design:paramtypes",[sample_data_sets.e,String])],StrokeIconsComponent);var ui=__webpack_require__("./.src/storybook/storybook_admin/lib/modules/ui/index.ts");const icons_stories={title:"UI/Icons",component:IconsComponent,argTypes:{},decorators:[(0,dist.moduleMetadata)({imports:[ui.r,storybook_shared_module.c],declarations:[IconsComponent,PaintIconsComponent,StrokeIconsComponent,PictureIconsComponent,LetterIconsComponent]}),(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(ui.r),(0,core.importProvidersFrom)(storybook_shared_module.c),(0,core.importProvidersFrom)(http.q1)]})]},strokeIcons={args:{view:"stroke-icons"}},paintIcons={args:{view:"paint-icons"}},pictureIcons={args:{view:"picture-icons"}},letterIcons={args:{view:"letter-icons"}};strokeIcons.parameters={...strokeIcons.parameters,docs:{...strokeIcons.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'stroke-icons'\n  }\n}",...strokeIcons.parameters?.docs?.source}}},paintIcons.parameters={...paintIcons.parameters,docs:{...paintIcons.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'paint-icons'\n  }\n}",...paintIcons.parameters?.docs?.source}}},pictureIcons.parameters={...pictureIcons.parameters,docs:{...pictureIcons.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'picture-icons'\n  }\n}",...pictureIcons.parameters?.docs?.source}}},letterIcons.parameters={...letterIcons.parameters,docs:{...letterIcons.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'letter-icons'\n  }\n}",...letterIcons.parameters?.docs?.source}}};const __namedExportsOrder=["strokeIcons","paintIcons","pictureIcons","letterIcons"]}}]);