"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[216],{"./.src/storybook/storybook_admin/lib/storybook/shared/sample-data-sets.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{e:()=>SampleDataSets});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),moment__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/moment/moment.js"),_angular_core__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs");let SampleDataSets=class SampleDataSets{constructor(){this.datepipe=new _angular_common__WEBPACK_IMPORTED_MODULE_1__.DatePipe("en-US"),this.DATES=[this.datepipe.transform(new Date,"short"),moment__WEBPACK_IMPORTED_MODULE_0__().format("MM Do YY"),moment__WEBPACK_IMPORTED_MODULE_0__().startOf("day").fromNow(),moment__WEBPACK_IMPORTED_MODULE_0__().endOf("day").fromNow(),moment__WEBPACK_IMPORTED_MODULE_0__().startOf("hour").fromNow(),moment__WEBPACK_IMPORTED_MODULE_0__().subtract(3,"days").calendar(),moment__WEBPACK_IMPORTED_MODULE_0__().calendar(),moment__WEBPACK_IMPORTED_MODULE_0__().add(20,"days").calendar(),moment__WEBPACK_IMPORTED_MODULE_0__().format("LT"),moment__WEBPACK_IMPORTED_MODULE_0__().format("LTS"),moment__WEBPACK_IMPORTED_MODULE_0__().locale("ja").format("LL")],this.POSTER_IMAGES=["akira.webp","all-quiet-on-the-western-front.webp","breaking-bad.webp","gone-girl.webp","once-upon-a-time-in-hollywood.webp","paprika.webp","pulp-fiction.webp"].map((item=>`/assets/core/img/sample-poster/${item}`)),this.STROKE_ICONS=["caret-down-small","power","checked","plus","caret-down","ellipsis-v","ellipsis-h","arrow-left","search","delivery-box","cloud","fullscreen-on","fullscreen-off","ear","waveform","mic","subtitle","comment","ticket","location","download","upload","2k","4k"],this.PAINT_ICONS=["ellipsis-v","ellipsis-h"],this.ICON_SIZES=["xs","s","m","l","xl"],this.ICON_SHAPES=["","circle","rect"],this.PICTURE_ICONS=["bbc-news.webp","bff.webp","chemical-brothers.webp","criterion.webp","kubrick.webp","mubi.webp","nytimes.webp"].map((item=>`/assets/core/img/sample-logo/${item}`)),this.COMBINATIONS=[["purchased","5 days ago"],["produced by","Adam Mckay"],["duration","2h56m"],["audio","5.1ch"],["France","Paris"],["at","Barbican Centre"],["Available from","3/2/2024"],["Apply to","Sandance Film Festival"],["Single Ticket","22.40 $"]],this.BIG_FILM_FESTIVALS=[{title:"Festival de Cannes",country:"France",description:"L'un des festivals de cinéma les plus connus et prestigieux au monde, se tenant annuellement à Cannes."},{title:"Berliner Filmfestspiele",country:"Germany",description:"Auch bekannt als die Internationale Filmfestspiele Berlin oder Berlinale, gehört sie zu den größten Filmfestivals weltweit."},{title:"Festival Internacional de Cine de Venecia",country:"Italy",description:"Il Festival del Cinema di Venezia è il più antico festival cinematografico del mondo ed è celebre per la sua storia e il contributo all'industria cinematografica."},{title:"東京国際映画祭",country:"日本",description:"アジアで際立っている映画祭で、日本と国際的な映画を展示しています。"},{title:"مهرجان القاهرة السينمائي الدولي",country:"Egypt",description:"هو حدث رئيسي لصناعة السينما المصرية والعربية."},{title:"Фестиваль кино и театра",country:"Russia",description:"Кинотавр, открытый российский кинофестиваль, является одним из самых значимых кинофестивалей в России."},{title:"Festival Internacional de Cine de Mar del Plata",country:"Argentina",description:"El Festival Internacional de Cine de Mar del Plata es el único festival de cine acreditado por la FIAPF en América Latina."},{title:"국제영화제",country:"South Korea",description:"부산국제영화제는 아시아에서 가장 중요한 영화제 중 하나로, 특히 아시아 국가들의 새로운 영화와 첫 번째 감독들을 소개하는 데 중점을 둡니다."},{title:"Jio MAMI Mumbai Film Festival with Star",country:"India",description:"मुंबई एकेडमी ऑफ द मूविंग इमेज (MAMI) मुंबई में एक अंतरराष्ट्रीय फिल्म महोत्सव की मेजबानी करता है, जो भारत और दुनिया भर से नई सिनेमा का प्रदर्शन करता है।"},{title:"Festival Internacional de Cinema do Rio de Janeiro",country:"Brazil",description:"O Festival Internacional de Cinema do Rio de Janeiro apresenta filmes internacionais e brasileiros e é um grande evento no calendário cinematográfico da América do Sul."}],this.LOCAL_FILM_FESTIVALS=[{title:"Фантастический кинофестиваль",country:"Russia",description:"A festival dedicated to fantasy and science fiction films."},{title:"Festival de Cine Bizarro de La Plata",country:"Argentina",description:"Celebrating unconventional and bizarre films, this festival is a haven for the unique and strange in cinema."},{title:"幻想映画祭",country:"Japan",description:"A fantasy film festival that showcases fantasy films from around the globe, with a focus on Japanese contributions."},{title:"Festival Internacional de Cine de Terror de Valdivia",country:"Chile",description:"This festival specializes in horror films, attracting enthusiasts of the genre from all over."},{title:"Sitges - Festival Internacional de Cinema Fantàstic de Catalunya",country:"Spain",description:"One of the most recognized festivals for fantasy and horror films in the world."},{title:"부천국제판타스틱영화제",country:"South Korea",description:"Focuses on South Korean and international horror, thriller, mystery, and fantasy films."},{title:"Festival du Film Merveilleux & Imaginaire",country:"France",description:"Dedicated to films that explore the wonderful, magical, and imaginary."},{title:"Freak Show Horror Film Festival",country:"United States",description:"An annual event in Orlando that celebrates independent horror cinema."},{title:"Fantaspoa - Festival Internacional de Cinema Fantástico de Porto Alegre",country:"Brazil",description:"Latin America's largest genre film festival, focusing on fantasy, horror, and science fiction movies."},{title:"Midnight Sun Film Festival",country:"Finland",description:"A unique festival held in Lapland during the time of the midnight sun, showcasing a mix of classic films and contemporary cinema without differentiating by genre, but known for its unique atmosphere and celebration of cinematic art."}],this.VENUES=[],this.FILMS=[],this.AUTHORS=[],this.PRICES=[],this.USERNAMES=[],this.NAMES=[],this.STATS=[{value:1099,unit:"%"}],this.DATE_FORMATS=[]}static{this.ctorParameters=()=>[]}};SampleDataSets=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable)({providedIn:"root"}),(0,tslib__WEBPACK_IMPORTED_MODULE_2__.Sn)("design:paramtypes",[])],SampleDataSets)},"./.src/storybook/storybook_admin/lib/storybook/shared/styles/icons.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>icons_stories,letters:()=>letters,paints:()=>paints,pictures:()=>pictures,strokes:()=>strokes,withMonoTextVert:()=>withMonoTextVert,withMonoTexts:()=>withMonoTexts,withSansTextVert:()=>withSansTextVert,withSansTexts:()=>withSansTexts,withSerifTextVert:()=>withSerifTextVert,withSerifTexts:()=>withSerifTexts});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),http=__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),sample_data_sets=__webpack_require__("./.src/storybook/storybook_admin/lib/storybook/shared/sample-data-sets.ts"),style_configurator_service=__webpack_require__("./.src/storybook/storybook_admin/lib/storybook/shared/configurator/style-configurator.service.ts");let IconsComponent=class IconsComponent{constructor(configurator,samples,baseHref){this.configurator=configurator,this.samples=samples,this.baseHref=baseHref,this.view="strokes"}imageUrl(path){return`${this.baseHref.replace(/\/$/,"")}${path}`}randomImage(){const len=this.samples.PICTURE_ICONS.length,index=Math.floor(Math.random()*len),path=this.samples.PICTURE_ICONS[index];return console.log(len,index,path),this.imageUrl(path)}concat(a,b){return{...a,...b}}ngOnInit(){}getTooltip(...classes){return`<div class="bg-dark chip-s fixed-container h-gap-s h-layout">\n            \x3c!--\n            <div stroke-icon icon="search" class="fg-dark xs stroke-icon">\n                <svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">\n                    <ellipse cx="10" cy="10" rx="6" ry="6" transform="rotate(-90 10 10)"></ellipse>\n                    <path d="M14.5 14.5L20 20" stroke-linecap="round" stroke-linejoin="round"></path>\n                </svg>\n            </div>\n            --\x3e\n            <div class="fg-dark mono-small single-line">${classes.join("<br>")}</div>\n        </div>`}static{this.ctorParameters=()=>[{type:style_configurator_service.W},{type:sample_data_sets.e},{type:String,decorators:[{type:core.Inject,args:[common.APP_BASE_HREF]}]}]}static{this.propDecorators={view:[{type:core.Input}]}}};IconsComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"[icons-component]",changeDetection:core.ChangeDetectionStrategy.OnPush,template:'<div class="layout" style="width: 100vw; height: 100vh;">\n    <ng-container *ngIf="view === \'strokes\'">\n        <div class="flex-container v-layout">\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xs\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xs\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xs\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xs\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xs\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'s\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'s\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'s\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'s\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'s\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'m\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'m\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'m\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'m\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'m\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'l\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'l\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'l\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'l\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'l\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xl\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xl\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xl\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xl\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="strokeIcons; context: { $implicit: { \'xl\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf="view === \'paints\'">\n        <div class="flex-container v-layout">\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xs\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xs\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xs\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xs\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xs\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'s\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'s\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'s\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'s\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'s\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'m\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'m\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'m\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'m\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'m\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'l\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'l\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'l\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'l\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'l\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xl\': true, background: false, circle: false, \'rect\': false, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xl\': true, background: true, circle: true, \'rect\': false, \'bg-dark-a\': true, \'fg-dark\': true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xl\': true, border: true, circle: true, \'rect\': false, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xl\': true, background: true, circle: false, \'rect\': true, \'bg-b\': true, fg: true } }"></ng-container>\n            </div>\n            <div class="fixed-container h75">\n                <ng-container *ngTemplateOutlet="paintIcons; context: { $implicit: { \'xl\': true, border: true, circle: false, \'rect\': true, fg: true } }"></ng-container>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf="view === \'pictures\'">\n        <div class="flex-container v-layout">\n            <div class="fixed-container">\n                <div class="specimen-container w100p h100"\n                    *ngFor="let sample of samples.PICTURE_ICONS">\n                    <ng-container\n                        *ngFor="let shape of samples.ICON_SHAPES">\n                        <ng-container\n                            *ngFor="let size of samples.ICON_SIZES">\n                            <div class="specimen">\n                                <div class="picture-icon {{shape}} {{size}} fg-dark-a">\n                                    <picture okraImage [src]="imageUrl(sample)"></picture>\n                                </div>\n                            </div>\n                        </ng-container>\n                    </ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf="view === \'letters\'">\n        <div class="flex-container v-layout">\n            <ng-container *ngTemplateOutlet="lettersByShape; context: { $implicit: { \'circle\': true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="lettersByShape; context: { $implicit: { \'rect\': true } }"></ng-container>\n            <ng-container *ngTemplateOutlet="lettersByShape; context: { $implicit: {} }"></ng-container>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf="view === \'withSerifTexts\'">\n        <div class="flex-container v-layout">\n            <div class="fixed-container">\n                <div class="specimen-container w33p h150">\n                    <ng-container *ngTemplateOutlet="iconText; context: { $implicit: { fontFamily: \'serif\', direction: \'h\',\n                    buttonStyles: [\n                        { button: \'\', fg: \'fg\' },\n                        { button: \'chip-s border\', fg: \'fg\'},\n                        { button: \'chip-s bg-a\', fg: \'fg\'},\n                        { button: \'chip-s bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-m border\', fg: \'fg\'},\n                        { button: \'chip-m bg-a\', fg: \'fg\'},\n                        { button: \'chip-m bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-l border\', fg: \'fg\'},\n                        { button: \'chip-l bg-a\', fg: \'fg\'},\n                        { button: \'chip-l bg-dark\', fg: \'fg-dark\'},\n                        { button: \'round-button-s border\', fg: \'fg\'},\n                        { button: \'button-s border\', fg: \'fg\' },\n                        { button: \'round-button-m border\', fg: \'fg\' },\n                        { button: \'button-m border\', fg: \'fg\' },\n                        { button: \'round-button-l border\', fg: \'fg\' },\n                        { button: \'button-l border\', fg: \'fg\' },\n                        { button: \'round-button-s bg-a\', fg: \'fg\' },\n                        { button: \'button-s bg-a\', fg: \'fg\' },\n                        { button: \'round-button-m bg-a\', fg: \'fg\' },\n                        { button: \'button-m bg-a\', fg: \'fg\' },\n                        { button: \'round-button-l bg-a\', fg: \'fg\' },\n                        { button: \'button-l bg-a\', fg: \'fg\' },\n                        { button: \'round-button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-l bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-l bg-dark\', fg: \'fg-dark\' }\n                    ] } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf="view === \'withMonoTexts\'">\n        <div class="flex-container v-layout">\n            <div class="fixed-container">\n                <div class="specimen-container w33p h150">\n                    <ng-container *ngTemplateOutlet="iconText; context: { $implicit: { fontFamily: \'mono\', direction: \'h\',\n                    buttonStyles: [\n                        { button: \'\', fg: \'fg\' },\n                        { button: \'chip-s border\', fg: \'fg\'},\n                        { button: \'chip-s bg-a\', fg: \'fg\'},\n                        { button: \'chip-s bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-m border\', fg: \'fg\'},\n                        { button: \'chip-m bg-a\', fg: \'fg\'},\n                        { button: \'chip-m bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-l border\', fg: \'fg\'},\n                        { button: \'chip-l bg-a\', fg: \'fg\'},\n                        { button: \'chip-l bg-dark\', fg: \'fg-dark\'},\n                        { button: \'round-button-s border\', fg: \'fg\'},\n                        { button: \'button-s border\', fg: \'fg\' },\n                        { button: \'round-button-m border\', fg: \'fg\' },\n                        { button: \'button-m border\', fg: \'fg\' },\n                        { button: \'round-button-l border\', fg: \'fg\' },\n                        { button: \'button-l border\', fg: \'fg\' },\n                        { button: \'round-button-s bg-a\', fg: \'fg\' },\n                        { button: \'button-s bg-a\', fg: \'fg\' },\n                        { button: \'round-button-m bg-a\', fg: \'fg\' },\n                        { button: \'button-m bg-a\', fg: \'fg\' },\n                        { button: \'round-button-l bg-a\', fg: \'fg\' },\n                        { button: \'button-l bg-a\', fg: \'fg\' },\n                        { button: \'round-button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-l bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-l bg-dark\', fg: \'fg-dark\' }\n                    ] } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf="view === \'withSansTexts\'">\n        <div class="flex-container v-layout">\n            <div class="fixed-container">\n                <div class="specimen-container w33p h150">\n                    <ng-container *ngTemplateOutlet="iconText; context: { $implicit: { fontFamily: \'sans\', direction: \'h\',\n                    buttonStyles: [\n                        { button: \'\', fg: \'fg\' },\n                        { button: \'chip-s border\', fg: \'fg\'},\n                        { button: \'chip-s bg-a\', fg: \'fg\'},\n                        { button: \'chip-s bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-m border\', fg: \'fg\'},\n                        { button: \'chip-m bg-a\', fg: \'fg\'},\n                        { button: \'chip-m bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-l border\', fg: \'fg\'},\n                        { button: \'chip-l bg-a\', fg: \'fg\'},\n                        { button: \'chip-l bg-dark\', fg: \'fg-dark\'},\n                        { button: \'round-button-s border\', fg: \'fg\'},\n                        { button: \'button-s border\', fg: \'fg\' },\n                        { button: \'round-button-m border\', fg: \'fg\' },\n                        { button: \'button-m border\', fg: \'fg\' },\n                        { button: \'round-button-l border\', fg: \'fg\' },\n                        { button: \'button-l border\', fg: \'fg\' },\n                        { button: \'round-button-s bg-a\', fg: \'fg\' },\n                        { button: \'button-s bg-a\', fg: \'fg\' },\n                        { button: \'round-button-m bg-a\', fg: \'fg\' },\n                        { button: \'button-m bg-a\', fg: \'fg\' },\n                        { button: \'round-button-l bg-a\', fg: \'fg\' },\n                        { button: \'button-l bg-a\', fg: \'fg\' },\n                        { button: \'round-button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-l bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-l bg-dark\', fg: \'fg-dark\' }\n                    ] } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf="view === \'withSerifTextsVert\'">\n        <div class="flex-container v-layout">\n            <div class="fixed-container">\n                <div class="specimen-container w33p h200">\n                    <ng-container *ngTemplateOutlet="iconText; context: { $implicit: { fontFamily: \'serif\', direction: \'v\',\n                    buttonStyles: [\n                        { button: \'\', fg: \'fg\' },\n                        { button: \'chip-s border\', fg: \'fg\'},\n                        { button: \'chip-s bg-a\', fg: \'fg\'},\n                        { button: \'chip-s bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-m border\', fg: \'fg\'},\n                        { button: \'chip-m bg-a\', fg: \'fg\'},\n                        { button: \'chip-m bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-l border\', fg: \'fg\'},\n                        { button: \'chip-l bg-a\', fg: \'fg\'},\n                        { button: \'chip-l bg-dark\', fg: \'fg-dark\'},\n                        { button: \'round-button-s border\', fg: \'fg\'},\n                        { button: \'button-s border\', fg: \'fg\' },\n                        { button: \'round-button-m border\', fg: \'fg\' },\n                        { button: \'button-m border\', fg: \'fg\' },\n                        { button: \'round-button-l border\', fg: \'fg\' },\n                        { button: \'button-l border\', fg: \'fg\' },\n                        { button: \'round-button-s bg-a\', fg: \'fg\' },\n                        { button: \'button-s bg-a\', fg: \'fg\' },\n                        { button: \'round-button-m bg-a\', fg: \'fg\' },\n                        { button: \'button-m bg-a\', fg: \'fg\' },\n                        { button: \'round-button-l bg-a\', fg: \'fg\' },\n                        { button: \'button-l bg-a\', fg: \'fg\' },\n                        { button: \'round-button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-l bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-l bg-dark\', fg: \'fg-dark\' }\n                    ] } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf="view === \'withMonoTextsVert\'">\n        <div class="flex-container v-layout">\n            <div class="fixed-container">\n                <div class="specimen-container w33p h200">\n                    <ng-container *ngTemplateOutlet="iconText; context: { $implicit: { fontFamily: \'mono\', direction: \'v\',\n                    buttonStyles: [\n                        { button: \'\', fg: \'fg\' },\n                        { button: \'chip-s border\', fg: \'fg\'},\n                        { button: \'chip-s bg-a\', fg: \'fg\'},\n                        { button: \'chip-s bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-m border\', fg: \'fg\'},\n                        { button: \'chip-m bg-a\', fg: \'fg\'},\n                        { button: \'chip-m bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-l border\', fg: \'fg\'},\n                        { button: \'chip-l bg-a\', fg: \'fg\'},\n                        { button: \'chip-l bg-dark\', fg: \'fg-dark\'},\n                        { button: \'round-button-s border\', fg: \'fg\'},\n                        { button: \'button-s border\', fg: \'fg\' },\n                        { button: \'round-button-m border\', fg: \'fg\' },\n                        { button: \'button-m border\', fg: \'fg\' },\n                        { button: \'round-button-l border\', fg: \'fg\' },\n                        { button: \'button-l border\', fg: \'fg\' },\n                        { button: \'round-button-s bg-a\', fg: \'fg\' },\n                        { button: \'button-s bg-a\', fg: \'fg\' },\n                        { button: \'round-button-m bg-a\', fg: \'fg\' },\n                        { button: \'button-m bg-a\', fg: \'fg\' },\n                        { button: \'round-button-l bg-a\', fg: \'fg\' },\n                        { button: \'button-l bg-a\', fg: \'fg\' },\n                        { button: \'round-button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-l bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-l bg-dark\', fg: \'fg-dark\' }\n                    ] } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n    <ng-container *ngIf="view === \'withSansTextsVert\'">\n        <div class="flex-container v-layout">\n            <div class="fixed-container">\n                <div class="specimen-container w33p h200">\n                    <ng-container *ngTemplateOutlet="iconText; context: { $implicit: { fontFamily: \'sans\', direction: \'v\',\n                    buttonStyles: [\n                        { button: \'\', fg: \'fg\' },\n                        { button: \'chip-s border\', fg: \'fg\'},\n                        { button: \'chip-s bg-a\', fg: \'fg\'},\n                        { button: \'chip-s bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-m border\', fg: \'fg\'},\n                        { button: \'chip-m bg-a\', fg: \'fg\'},\n                        { button: \'chip-m bg-dark\', fg: \'fg-dark\'},\n                        { button: \'chip-l border\', fg: \'fg\'},\n                        { button: \'chip-l bg-a\', fg: \'fg\'},\n                        { button: \'chip-l bg-dark\', fg: \'fg-dark\'},\n                        { button: \'round-button-s border\', fg: \'fg\'},\n                        { button: \'button-s border\', fg: \'fg\' },\n                        { button: \'round-button-m border\', fg: \'fg\' },\n                        { button: \'button-m border\', fg: \'fg\' },\n                        { button: \'round-button-l border\', fg: \'fg\' },\n                        { button: \'button-l border\', fg: \'fg\' },\n                        { button: \'round-button-s bg-a\', fg: \'fg\' },\n                        { button: \'button-s bg-a\', fg: \'fg\' },\n                        { button: \'round-button-m bg-a\', fg: \'fg\' },\n                        { button: \'button-m bg-a\', fg: \'fg\' },\n                        { button: \'round-button-l bg-a\', fg: \'fg\' },\n                        { button: \'button-l bg-a\', fg: \'fg\' },\n                        { button: \'round-button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-s bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-m bg-dark\', fg: \'fg-dark\' },\n                        { button: \'round-button-l bg-dark\', fg: \'fg-dark\' },\n                        { button: \'button-l bg-dark\', fg: \'fg-dark\' }\n                    ] } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n</div>\n\n\n<ng-template #strokeIcons let-classes>\n    <div class="fixed-container h150">\n        <div class="specimen">\n            <div class="fixed-container h-layout h-gap-s">\n                <div [stroke-icon]\n                    *ngFor="let iconName of samples.STROKE_ICONS"\n                    [icon]="iconName" [ngClass]="classes"></div>\n            </div>\n        </div>\n    </div>\n    <div class="fixed-container h75">\n        <div class="specimen-container w75 h75">\n            <div class="specimen align-center justify-center"\n                *ngFor="let iconName of samples.STROKE_ICONS">\n                <div stroke-icon [icon]="iconName" [ngClass]="classes"></div>\n            </div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #paintIcons let-classes>\n    <div class="specimen-container w75 h75">\n        <div class="specimen align-center justify-center"\n            *ngFor="let iconName of samples.PAINT_ICONS">\n            <div paint-icon [icon]="iconName" [ngClass]="classes"></div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #lettersByShape let-classes>\n    <div class="fixed-container h75">\n        <ng-container *ngTemplateOutlet="letters; context: { $implicit: { letter: \'Y\', classes: classes } }"></ng-container>\n    </div>\n    <div class="fixed-container h75">\n        <ng-container *ngTemplateOutlet="letters; context: { $implicit: { letter: \'&\', classes: classes } }"></ng-container>\n    </div>\n    <div class="fixed-container h75">\n        <ng-container *ngTemplateOutlet="letters; context: { $implicit: { letter: \'AZ\', classes: classes } }"></ng-container>\n    </div>\n    <div class="fixed-container h75">\n        <ng-container *ngTemplateOutlet="letters; context: { $implicit: { letter: \'dj\', classes: classes } }"></ng-container>\n    </div>\n    <div class="fixed-container h75">\n        <ng-container *ngTemplateOutlet="letters; context: { $implicit: { letter: \'5\', classes: concat(classes, { expands: true, \'bg-dark-a\': true }) } }"></ng-container>\n    </div>\n    <div class="fixed-container h75">\n        <ng-container *ngTemplateOutlet="letters; context: { $implicit: { letter: \'125\', classes: concat(classes, { expands: true, \'bg-dark-a\': true }) } }"></ng-container>\n    </div>\n</ng-template>\n\n\n<ng-template #letters let-obj>\n    <div class="specimen-container w100 h75">\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xs bg-dark fg-dark single-line mono-small" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xs bg-dark fg-dark single-line serif-small" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xs bg-dark fg-dark single-line sans-small" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line mono-small" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line serif-small" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line sans-small" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line mono-small-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line serif-small-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line sans-small-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line mono-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line serif-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line sans-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line mono-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line serif-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon s bg-dark fg-dark single-line sans-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon m bg-dark fg-dark single-line mono-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon m bg-dark fg-dark single-line serif-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon m bg-dark fg-dark single-line sans-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon m bg-dark fg-dark single-line mono-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon m bg-dark fg-dark single-line serif-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon m bg-dark fg-dark single-line sans-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line mono-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line serif-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line sans-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line mono-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line serif-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line sans-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line mono-large-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line serif-large" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line sans-large" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line mono-large-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line serif-large-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon l bg-dark fg-dark single-line sans-large-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line mono-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line serif-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line sans-medium" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line mono-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line serif-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line sans-medium-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line mono-large" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line serif-large" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line sans-large" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line mono-large-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line serif-large-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n        <div class="specimen align-center justify-center">\n            <div class="letter-icon xl bg-dark fg-dark single-line sans-large-bold" [ngClass]="obj.classes">{{ obj.letter }}</div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #iconText let-obj>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-s {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="search" class="xs {{ buttonStyle.fg }}"></div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Search for</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-s {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="search" class="xs circle background bg-dark-a fg-dark"></div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Search for</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-s {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="letter-icon s bg-dark fg-dark single-line mono-small" [ngClass]="obj.classes">WB</div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Warner Bros</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-s {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="letter-icon s circle bg-dark fg-dark single-line mono-small" [ngClass]="obj.classes">WB</div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Warner Bros</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-s {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="letter-icon s rect bg-dark fg-dark single-line mono-small" [ngClass]="obj.classes">WB</div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Warner Bros</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-s {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="picture-icon rect s fg-dark-a">\n                <picture okraImage [src]="imageUrl(samples.PICTURE_ICONS[0])"></picture>\n            </div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">your account</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-s {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="picture-icon circle s fg-dark-a">\n                <picture okraImage [src]="imageUrl(samples.PICTURE_ICONS[1])"></picture>\n            </div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">your account</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="checked" class="xs circle background bg-dark-a fg-dark"></div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">51</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="checked" class="xs {{ buttonStyle.fg }}"></div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">51</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Explore</div>\n            <div paint-icon icon="ellipsis-h" class="xs {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Explore</div>\n            <div paint-icon icon="ellipsis-v" class="xs {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="picture-icon rect m fg-dark-a">\n                <picture okraImage [src]="imageUrl(samples.PICTURE_ICONS[2])"></picture>\n            </div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">followers</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="picture-icon circle m fg-dark-a">\n                <picture okraImage [src]="imageUrl(samples.PICTURE_ICONS[3])"></picture>\n            </div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Criterion Channels</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="letter-icon m circle bg-dark fg-dark single-line mono-medium" [ngClass]="obj.classes">dk</div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Donna Karan</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="letter-icon m rect bg-dark fg-dark single-line sans-medium" [ngClass]="obj.classes">NY</div>\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">NYPL</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Share with friends</div>\n            <div paint-icon icon="ellipsis-h" class="xs background rect bg-b fg"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Share with friends</div>\n            <div paint-icon icon="ellipsis-v" class="xs background rect bg-b fg"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-large {{ buttonStyle.fg }}">Explore</div>\n            <div paint-icon icon="ellipsis-h" class="s {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-large {{ buttonStyle.fg }}">Explore</div>\n            <div paint-icon icon="ellipsis-v" class="s {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Share with friends</div>\n            <div paint-icon icon="ellipsis-h" class="m background circle bg-b fg"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Share with friends</div>\n            <div paint-icon icon="ellipsis-v" class="m background circle bg-b fg"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-s {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="mic" class="xs {{ buttonStyle.fg }}"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Yamaha Microphone</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="checked" class="xs circle background bg-dark-a fg-dark"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Berliner Filmfestspiele</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="checked" class="xs {{ buttonStyle.fg }}"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">51</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="checked" class="xs circle background bg-dark-a fg-dark"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">51</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-s {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="location" class="s {{ buttonStyle.fg }}"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Berliner Filmfestspiele</div>\n            <div stroke-icon icon="arrow-right" class="s circle background bg-dark-a fg-dark"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="location" class="s circle background bg-dark-a fg-dark"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Barbican Centre</div>\n            <div stroke-icon icon="select" class="xs {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="letter-icon l circle bg-dark fg-dark single-line mono-medium-bold" [ngClass]="obj.classes">ts</div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">TypeScript</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="letter-icon l rect bg-dark fg-dark single-line sans-medium-bold" [ngClass]="obj.classes">Full</div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Full Screen</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="picture-icon rect l fg-dark-a">\n                <picture okraImage [src]="imageUrl(samples.PICTURE_ICONS[4])"></picture>\n            </div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Stanley Kubrick</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="picture-icon circle l fg-dark-a">\n                <picture okraImage [src]="imageUrl(samples.PICTURE_ICONS[5])"></picture>\n            </div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">MUBI</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-s {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="waveform" class="s {{ buttonStyle.fg }}"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Right Surround</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="waveform" class="s circle background bg-dark-a fg-dark"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">5.1ch</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Share to editors</div>\n            <div stroke-icon icon="select" class="xs {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Share to editors</div>\n            <div stroke-icon icon="select" class="xs circle background bg-dark-a fg-dark"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Add Film</div>\n            <div stroke-icon icon="plus" class="xs {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Add Translation</div>\n            <div stroke-icon icon="plus" class="s circle background bg-dark-a fg-dark"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Translators</div>\n            <div stroke-icon icon="caret-down-small" class="xs {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Orders</div>\n            <div stroke-icon icon="caret-down-small" class="xs rect background bg-b fg"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Orders</div>\n            <div stroke-icon icon="caret-down-small" class="xs {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Japanese / German</div>\n            <div stroke-icon icon="ellipsis-v" class="xs {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Japanese / German</div>\n            <div stroke-icon icon="ellipsis-v" class="s circle background bg-dark-a fg-dark"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-small {{ buttonStyle.fg }}">Orders</div>\n            <div stroke-icon icon="caret-down-small" class="s rect background bg-b fg"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Orders</div>\n            <div stroke-icon icon="caret-down-small" class="s {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Your Account</div>\n            <div stroke-icon icon="caret-down-small" class="s circle border bg-dark-a fg-dark"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="letter-icon xl circle bg-dark fg-dark single-line mono-medium-bold" [ngClass]="obj.classes">5.1ch</div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Select</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="letter-icon xl rect bg-dark fg-dark single-line sans-medium-bold" [ngClass]="obj.classes">Stereo</div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Audio</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-m {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="letter-icon xl rect bg-dark-a fg-dark sans-small" [ngClass]="obj.classes">Apple Prores</div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Audio</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="picture-icon rect xl fg-dark-a">\n                <picture okraImage [src]="imageUrl(samples.PICTURE_ICONS[6])"></picture>\n            </div>\n            <div class="single-line {{ obj.fontFamily }}-large {{ buttonStyle.fg }}">New York Times</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="picture-icon circle xl fg-dark-a">\n                <picture okraImage [src]="imageUrl(samples.PICTURE_ICONS[0])"></picture>\n            </div>\n            <div class="single-line {{ obj.fontFamily }}-large {{ buttonStyle.fg }}">BBC News</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Tickets</div>\n            <div stroke-icon icon="caret-down-small" class="m {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Barbican Centre</div>\n            <div stroke-icon icon="caret-down-small" class="m circle background bg-dark-a fg-dark"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-large {{ buttonStyle.fg }}">Tickets</div>\n            <div stroke-icon icon="caret-down-small" class="m {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-large {{ buttonStyle.fg }}">More films</div>\n            <div stroke-icon icon="caret-down-small" class="m circle background bg-dark-a fg-dark"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Tickets</div>\n            <div stroke-icon icon="caret-down-small" class="l {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="location" class="l {{ buttonStyle.fg }}"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Barbican Centre</div>\n            <div stroke-icon icon="plus" class="l circle background bg-dark-a fg-dark"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-large {{ buttonStyle.fg }}">Tickets</div>\n            <div stroke-icon icon="caret-down-small" class="l {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-large {{ buttonStyle.fg }}">Barbican Centre</div>\n            <div stroke-icon icon="arrow-right" class="xl circle border {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Tickets</div>\n            <div stroke-icon icon="caret-down-small" class="xl {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="ticket" class="xl circle background bg-dark-a fg-dark"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Barbican Centre</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="delivery-box" class="xl circle border {{ buttonStyle.fg }}"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Delivery</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div stroke-icon icon="comment" class="xl circle background bg-a fg"></div>\n            <div class="single-line {{ obj.fontFamily }}-medium {{ buttonStyle.fg }}">Messsage</div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-large {{ buttonStyle.fg }}">Tickets</div>\n            <div stroke-icon icon="caret-down-small" class="xl {{ buttonStyle.fg }}"></div>\n        </div>\n    </div>\n    <div class="specimen align-center justify-center" *ngFor="let buttonStyle of obj.buttonStyles">\n        <div class="fixed-container {{ obj.direction }}-gap-l {{ obj.direction }}-layout {{ buttonStyle.button }}">\n            <div class="single-line {{ obj.fontFamily }}-large {{ buttonStyle.fg }}">The Godfather Series</div>\n            <div stroke-icon icon="caret-down-small" class="xl circle background bg-dark-a fg-dark"></div>\n        </div>\n    </div>\n</ng-template>'}),(0,tslib_es6.Sn)("design:paramtypes",[style_configurator_service.W,sample_data_sets.e,String])],IconsComponent);var storybook_shared_module=__webpack_require__("./.src/storybook/storybook_admin/lib/storybook/shared/storybook-shared.module.ts"),ui=__webpack_require__("./.src/storybook/storybook_admin/lib/modules/ui/index.ts");const icons_stories={title:"Shared/Styles/Foundation/Icons",component:IconsComponent,tags:["autodocs"],argTypes:{},decorators:[(0,dist.moduleMetadata)({imports:[ui.r,storybook_shared_module.c]}),(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(ui.r),(0,core.importProvidersFrom)(storybook_shared_module.c),(0,core.importProvidersFrom)(http.q1)]})]},strokes={args:{view:"strokes"}},paints={args:{view:"paints"}},pictures={args:{view:"pictures"}},letters={args:{view:"letters"}},withSerifTexts={args:{view:"withSerifTexts"}},withSerifTextVert={args:{view:"withSerifTextsVert"}},withMonoTexts={args:{view:"withMonoTexts"}},withMonoTextVert={args:{view:"withMonoTextsVert"}},withSansTexts={args:{view:"withSansTexts"}},withSansTextVert={args:{view:"withSansTextsVert"}};strokes.parameters={...strokes.parameters,docs:{...strokes.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'strokes'\n  }\n}",...strokes.parameters?.docs?.source}}},paints.parameters={...paints.parameters,docs:{...paints.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'paints'\n  }\n}",...paints.parameters?.docs?.source}}},pictures.parameters={...pictures.parameters,docs:{...pictures.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'pictures'\n  }\n}",...pictures.parameters?.docs?.source}}},letters.parameters={...letters.parameters,docs:{...letters.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'letters'\n  }\n}",...letters.parameters?.docs?.source}}},withSerifTexts.parameters={...withSerifTexts.parameters,docs:{...withSerifTexts.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'withSerifTexts'\n  }\n}",...withSerifTexts.parameters?.docs?.source}}},withSerifTextVert.parameters={...withSerifTextVert.parameters,docs:{...withSerifTextVert.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'withSerifTextsVert'\n  }\n}",...withSerifTextVert.parameters?.docs?.source}}},withMonoTexts.parameters={...withMonoTexts.parameters,docs:{...withMonoTexts.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'withMonoTexts'\n  }\n}",...withMonoTexts.parameters?.docs?.source}}},withMonoTextVert.parameters={...withMonoTextVert.parameters,docs:{...withMonoTextVert.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'withMonoTextsVert'\n  }\n}",...withMonoTextVert.parameters?.docs?.source}}},withSansTexts.parameters={...withSansTexts.parameters,docs:{...withSansTexts.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'withSansTexts'\n  }\n}",...withSansTexts.parameters?.docs?.source}}},withSansTextVert.parameters={...withSansTextVert.parameters,docs:{...withSansTextVert.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'withSansTextsVert'\n  }\n}",...withSansTextVert.parameters?.docs?.source}}};const __namedExportsOrder=["strokes","paints","pictures","letters","withSerifTexts","withSerifTextVert","withMonoTexts","withMonoTextVert","withSansTexts","withSansTextVert"]}}]);