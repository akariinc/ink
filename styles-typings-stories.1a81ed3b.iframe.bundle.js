"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[666],{"./.src/storybook/storybook_admin/lib/storybook/shared/sample-data-sets.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{e:()=>SampleDataSets});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),moment__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/moment/moment.js"),_angular_core__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs");let SampleDataSets=class SampleDataSets{constructor(){this.datepipe=new _angular_common__WEBPACK_IMPORTED_MODULE_1__.DatePipe("en-US"),this.DATES=[this.datepipe.transform(new Date,"short"),moment__WEBPACK_IMPORTED_MODULE_0__().format("MM Do YY"),moment__WEBPACK_IMPORTED_MODULE_0__().startOf("day").fromNow(),moment__WEBPACK_IMPORTED_MODULE_0__().endOf("day").fromNow(),moment__WEBPACK_IMPORTED_MODULE_0__().startOf("hour").fromNow(),moment__WEBPACK_IMPORTED_MODULE_0__().subtract(3,"days").calendar(),moment__WEBPACK_IMPORTED_MODULE_0__().calendar(),moment__WEBPACK_IMPORTED_MODULE_0__().add(20,"days").calendar(),moment__WEBPACK_IMPORTED_MODULE_0__().format("LT"),moment__WEBPACK_IMPORTED_MODULE_0__().format("LTS"),moment__WEBPACK_IMPORTED_MODULE_0__().locale("ja").format("LL")],this.POSTER_IMAGES=["akira.webp","all-quiet-on-the-western-front.webp","breaking-bad.webp","gone-girl.webp","once-upon-a-time-in-hollywood.webp","paprika.webp","pulp-fiction.webp"].map((item=>`/assets/core/img/sample-poster/${item}`)),this.STROKE_ICONS=["caret-down-small","power","checked","plus","caret-down","ellipsis-v","ellipsis-h","arrow-left","search","delivery-box","cloud","fullscreen-on","fullscreen-off","ear","waveform","mic","subtitle","comment","ticket","location","download","upload","2k","4k"],this.PAINT_ICONS=["ellipsis-v","ellipsis-h"],this.ICON_SIZES=["xs","s","m","l","xl"],this.ICON_SHAPES=["","circle","rect"],this.PICTURE_ICONS=["bbc-news.webp","bff.webp","chemical-brothers.webp","criterion.webp","kubrick.webp","mubi.webp","nytimes.webp"].map((item=>`/assets/core/img/sample-logo/${item}`)),this.COMBINATIONS=[["purchased","5 days ago"],["produced by","Adam Mckay"],["duration","2h56m"],["audio","5.1ch"],["France","Paris"],["at","Barbican Centre"],["Available from","3/2/2024"],["Apply to","Sandance Film Festival"],["Single Ticket","22.40 $"]],this.BIG_FILM_FESTIVALS=[{title:"Festival de Cannes",country:"France",description:"L'un des festivals de cinéma les plus connus et prestigieux au monde, se tenant annuellement à Cannes."},{title:"Berliner Filmfestspiele",country:"Germany",description:"Auch bekannt als die Internationale Filmfestspiele Berlin oder Berlinale, gehört sie zu den größten Filmfestivals weltweit."},{title:"Festival Internacional de Cine de Venecia",country:"Italy",description:"Il Festival del Cinema di Venezia è il più antico festival cinematografico del mondo ed è celebre per la sua storia e il contributo all'industria cinematografica."},{title:"東京国際映画祭",country:"日本",description:"アジアで際立っている映画祭で、日本と国際的な映画を展示しています。"},{title:"مهرجان القاهرة السينمائي الدولي",country:"Egypt",description:"هو حدث رئيسي لصناعة السينما المصرية والعربية."},{title:"Фестиваль кино и театра",country:"Russia",description:"Кинотавр, открытый российский кинофестиваль, является одним из самых значимых кинофестивалей в России."},{title:"Festival Internacional de Cine de Mar del Plata",country:"Argentina",description:"El Festival Internacional de Cine de Mar del Plata es el único festival de cine acreditado por la FIAPF en América Latina."},{title:"국제영화제",country:"South Korea",description:"부산국제영화제는 아시아에서 가장 중요한 영화제 중 하나로, 특히 아시아 국가들의 새로운 영화와 첫 번째 감독들을 소개하는 데 중점을 둡니다."},{title:"Jio MAMI Mumbai Film Festival with Star",country:"India",description:"मुंबई एकेडमी ऑफ द मूविंग इमेज (MAMI) मुंबई में एक अंतरराष्ट्रीय फिल्म महोत्सव की मेजबानी करता है, जो भारत और दुनिया भर से नई सिनेमा का प्रदर्शन करता है।"},{title:"Festival Internacional de Cinema do Rio de Janeiro",country:"Brazil",description:"O Festival Internacional de Cinema do Rio de Janeiro apresenta filmes internacionais e brasileiros e é um grande evento no calendário cinematográfico da América do Sul."}],this.LOCAL_FILM_FESTIVALS=[{title:"Фантастический кинофестиваль",country:"Russia",description:"A festival dedicated to fantasy and science fiction films."},{title:"Festival de Cine Bizarro de La Plata",country:"Argentina",description:"Celebrating unconventional and bizarre films, this festival is a haven for the unique and strange in cinema."},{title:"幻想映画祭",country:"Japan",description:"A fantasy film festival that showcases fantasy films from around the globe, with a focus on Japanese contributions."},{title:"Festival Internacional de Cine de Terror de Valdivia",country:"Chile",description:"This festival specializes in horror films, attracting enthusiasts of the genre from all over."},{title:"Sitges - Festival Internacional de Cinema Fantàstic de Catalunya",country:"Spain",description:"One of the most recognized festivals for fantasy and horror films in the world."},{title:"부천국제판타스틱영화제",country:"South Korea",description:"Focuses on South Korean and international horror, thriller, mystery, and fantasy films."},{title:"Festival du Film Merveilleux & Imaginaire",country:"France",description:"Dedicated to films that explore the wonderful, magical, and imaginary."},{title:"Freak Show Horror Film Festival",country:"United States",description:"An annual event in Orlando that celebrates independent horror cinema."},{title:"Fantaspoa - Festival Internacional de Cinema Fantástico de Porto Alegre",country:"Brazil",description:"Latin America's largest genre film festival, focusing on fantasy, horror, and science fiction movies."},{title:"Midnight Sun Film Festival",country:"Finland",description:"A unique festival held in Lapland during the time of the midnight sun, showcasing a mix of classic films and contemporary cinema without differentiating by genre, but known for its unique atmosphere and celebration of cinematic art."}],this.VENUES=[],this.FILMS=[],this.AUTHORS=[],this.PRICES=[],this.USERNAMES=[],this.NAMES=[],this.STATS=[{value:1099,unit:"%"}],this.DATE_FORMATS=[]}static{this.ctorParameters=()=>[]}};SampleDataSets=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable)({providedIn:"root"}),(0,tslib__WEBPACK_IMPORTED_MODULE_2__.Sn)("design:paramtypes",[])],SampleDataSets)},"./.src/storybook/storybook_admin/lib/storybook/shared/styles/typings.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,combinations:()=>combinations,combinationsButtonDarkL:()=>combinationsButtonDarkL,combinationsButtonDarkM:()=>combinationsButtonDarkM,combinationsButtonDarkS:()=>combinationsButtonDarkS,combinationsButtonL:()=>combinationsButtonL,combinationsButtonM:()=>combinationsButtonM,combinationsButtonS:()=>combinationsButtonS,combinationsChipDarkL:()=>combinationsChipDarkL,combinationsChipDarkM:()=>combinationsChipDarkM,combinationsChipDarkS:()=>combinationsChipDarkS,combinationsChipL:()=>combinationsChipL,combinationsChipM:()=>combinationsChipM,combinationsChipS:()=>combinationsChipS,combinationsRoundButtonDarkL:()=>combinationsRoundButtonDarkL,combinationsRoundButtonDarkM:()=>combinationsRoundButtonDarkM,combinationsRoundButtonDarkS:()=>combinationsRoundButtonDarkS,combinationsRoundButtonL:()=>combinationsRoundButtonL,combinationsRoundButtonM:()=>combinationsRoundButtonM,combinationsRoundButtonS:()=>combinationsRoundButtonS,default:()=>typings_stories,list:()=>list,styles:()=>styles});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),http=__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs"),storybook_shared_module=__webpack_require__("./.src/storybook/storybook_admin/lib/storybook/shared/storybook-shared.module.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),sample_data_sets=__webpack_require__("./.src/storybook/storybook_admin/lib/storybook/shared/sample-data-sets.ts"),style_configurator_service=__webpack_require__("./.src/storybook/storybook_admin/lib/storybook/shared/configurator/style-configurator.service.ts");let TypingsComponent=class TypingsComponent{constructor(configurator,samples){this.configurator=configurator,this.samples=samples,this.view="styles",this.isCircle=!1,this.width=200,this.height=150}ngOnInit(){this.isCircle&&(this.height=this.width)}static{this.ctorParameters=()=>[{type:style_configurator_service.W},{type:sample_data_sets.e}]}static{this.propDecorators={view:[{type:core.Input}],isCircle:[{type:core.Input}],width:[{type:core.Input}],height:[{type:core.Input}]}}};TypingsComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"[typings-component]",changeDetection:core.ChangeDetectionStrategy.OnPush,template:'\n<div class="layout" style="width: 100vw; height: 100vh;">\n    <ng-container *ngIf="view === \'styles\'">\n        <div class="flex-container v-layout">\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'mono-small\': true }, chipSize: \'s\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'sans-small\': true }, chipSize: \'s\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'serif-small\': true }, chipSize: \'s\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'mono-small-bold\': true }, chipSize: \'s\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'sans-small-bold\': true }, chipSize: \'s\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'serif-small-bold\': true }, chipSize: \'s\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'mono-medium\': true }, chipSize: \'m\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'sans-medium\': true }, chipSize: \'m\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'serif-medium\': true }, chipSize: \'m\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'mono-medium-bold\': true }, chipSize: \'m\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'sans-medium-bold\': true }, chipSize: \'m\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'serif-medium-bold\': true }, chipSize: \'m\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'mono-large\': true }, chipSize: \'l\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'sans-large\': true }, chipSize: \'l\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'serif-large\': true }, chipSize: \'l\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'mono-large-bold\': true }, chipSize: \'l\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'sans-large-bold\': true }, chipSize: \'l\' } }"></ng-container>\n            <ng-container *ngTemplateOutlet="texts; context: { $implicit: { classes: { \'serif-large-bold\': true }, chipSize: \'l\' } }"></ng-container>\n        </div>\n\n\n        <ng-template #texts let-style>\n            <div class="fixed-container">\n                <div class="specimen-container w50p h50">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 6)">\n                        <p class="single-line" [ngClass]="style.classes">{{ ff.title }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize === \'l\' ? \'w200 h75\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 6)">\n                        <p class="single-line chip-{{ style.chipSize }} bg-dark fg-dark" [ngClass]="style.classes">{{ ff.title }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize === \'l\' ? \'w200 h75\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 6)">\n                        <p class="single-line chip-{{ style.chipSize }} border fg" [ngClass]="style.classes">{{ ff.title }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 6)">\n                        <p class="single-line button-{{ style.chipSize }} bg-dark fg-dark" [ngClass]="style.classes">{{ ff.title }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 6)">\n                        <p class="single-line button-{{ style.chipSize }} border fg" [ngClass]="style.classes">{{ ff.title }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 6)">\n                        <p class="single-line round-button-{{ style.chipSize }} bg-dark fg-dark" [ngClass]="style.classes">{{ ff.title }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 6)">\n                        <p class="single-line round-button-{{ style.chipSize }} border fg" [ngClass]="style.classes">{{ ff.title }}</p>\n                    </div>\n                </div>\n            </div>\n\n            <div class="fixed-container">\n                <div class="specimen-container w150 h50">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 8)">\n                        <p class="single-line" [ngClass]="style.classes">{{ ff.country }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize === \'l\' ? \'w200 h75\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 8)">\n                        <p class="single-line chip-{{ style.chipSize }} bg-dark fg-dark" [ngClass]="style.classes">{{ ff.country }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize === \'l\' ? \'w200 h75\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 8)">\n                        <p class="single-line chip-{{ style.chipSize }} border fg" [ngClass]="style.classes">{{ ff.country }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 8)">\n                        <p class="single-line button-{{ style.chipSize }} bg-dark fg-dark" [ngClass]="style.classes">{{ ff.country }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 8)">\n                        <p class="single-line button-{{ style.chipSize }} border fg" [ngClass]="style.classes">{{ ff.country }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 8)">\n                        <p class="single-line round-button-{{ style.chipSize }} bg-dark fg-dark" [ngClass]="style.classes">{{ ff.country }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 8)">\n                        <p class="single-line round-button-{{ style.chipSize }} border fg" [ngClass]="style.classes">{{ ff.country }}</p>\n                    </div>\n                </div>\n            </div>\n\n            <div class="fixed-container">\n                <div class="specimen-container w150 h50">\n                    <div class="specimen"\n                    *ngFor="let date of samples.DATES">\n                        <p class="single-line" [ngClass]="style.classes">{{ date }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize === \'l\' ? \'w200 h75\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let date of samples.DATES">\n                        <p class="single-line chip-{{ style.chipSize }} bg-dark fg-dark" [ngClass]="style.classes">{{ date }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize === \'l\' ? \'w250 h75\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let date of samples.DATES">\n                        <p class="single-line chip-{{ style.chipSize }} border fg" [ngClass]="style.classes">{{ date }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let date of samples.DATES">\n                        <p class="single-line button-{{ style.chipSize }} bg-dark fg-dark" [ngClass]="style.classes">{{ date }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let date of samples.DATES">\n                        <p class="single-line button-{{ style.chipSize }} border fg" [ngClass]="style.classes">{{ date }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let date of samples.DATES">\n                        <p class="single-line round-button-{{ style.chipSize }} bg-dark fg-dark" [ngClass]="style.classes">{{ date }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize !== \'s\' ? \'w250 h100\' : \'w150 h50\' }}">\n                    <div class="specimen"\n                    *ngFor="let date of samples.DATES">\n                        <p class="single-line round-button-{{ style.chipSize }} border fg" [ngClass]="style.classes">{{ date }}</p>\n                    </div>\n                </div>\n            </div>\n            <div class="fixed-container">\n                <div class="specimen-container {{ style.chipSize === \'l\' ? \'w100p h200\' : \'w33p h150\' }}">\n                    <div class="specimen"\n                    *ngFor="let ff of samples.BIG_FILM_FESTIVALS.slice(0, 6)">\n                        <p class="multi-line" [ngClass]="style.classes">{{ ff.description }}</p>\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'list\'">\n        <div class="flex-container v-layout">\n            <div class="fixed-container">\n                <div class="specimen-container w200 h300">\n                    <div class="specimen no-pad">\n                        <div class="flex-container v-layout mono-small v-list-s v-list-size-s">\n                            <div *ngFor="let ff of samples.BIG_FILM_FESTIVALS"\n                                class="single-line align-center justify-start">{{ ff.title }}</div>\n                        </div>\n                    </div>\n                    <div class="specimen no-pad">\n                        <div class="flex-container v-layout sans-small v-list-s v-list-size-s">\n                            <div *ngFor="let ff of samples.BIG_FILM_FESTIVALS"\n                                class="single-line">{{ ff.title }}</div>\n                        </div>\n                    </div>\n                    <div class="specimen no-pad">\n                        <div class="flex-container v-layout serif-small v-list-s v-list-size-s">\n                            <div *ngFor="let ff of samples.BIG_FILM_FESTIVALS"\n                                class="single-line">{{ ff.title }}</div>\n                        </div>\n                    </div>\n                    <div class="specimen no-pad">\n                        <div class="flex-container v-layout mono-medium v-list-m v-list-size-m">\n                            <div *ngFor="let ff of samples.BIG_FILM_FESTIVALS"\n                                class="single-line">{{ ff.title }}</div>\n                        </div>\n                    </div>\n                    <div class="specimen no-pad">\n                        <div class="flex-container v-layout sans-medium v-list-m v-list-size-m">\n                            <div *ngFor="let ff of samples.BIG_FILM_FESTIVALS"\n                                class="single-line">{{ ff.title }}</div>\n                        </div>\n                    </div>\n                    <div class="specimen no-pad">\n                        <div class="flex-container v-layout serif-medium v-list-m v-list-size-m">\n                            <div *ngFor="let ff of samples.BIG_FILM_FESTIVALS"\n                                class="single-line">{{ ff.title }}</div>\n                        </div>\n                    </div>\n                    <div class="specimen no-pad">\n                        <div class="flex-container v-layout mono-medium-bold v-list-m v-list-size-m">\n                            <div *ngFor="let ff of samples.BIG_FILM_FESTIVALS"\n                                class="single-line">{{ ff.title }}</div>\n                        </div>\n                    </div>\n                    <div class="specimen no-pad">\n                        <div class="flex-container v-layout sans-medium-bold v-list-m v-list-size-m">\n                            <div *ngFor="let ff of samples.BIG_FILM_FESTIVALS"\n                                class="single-line">{{ ff.title }}</div>\n                        </div>\n                    </div>\n                    <div class="specimen no-pad">\n                        <div class="flex-container v-layout serif-medium-bold v-list-m v-list-size-m">\n                            <div *ngFor="let ff of samples.BIG_FILM_FESTIVALS"\n                                class="single-line">{{ ff.title }}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinations\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250 h100">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300 h100">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsChipS\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250 h100">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'chip-s border\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300 h100">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'chip-s border\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsChipM\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250 h100">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'chip-m border\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300 h100">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'chip-m border\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsChipL\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250 h100">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'chip-l border\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300 h100">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'chip-l border\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsChipDarkS\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'chip-s bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'chip-s bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsChipDarkM\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'chip-m bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'chip-m bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsChipDarkL\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'chip-l bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'chip-l bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsButtonS\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'button-s bg-a\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'button-s bg-a\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsButtonM\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'button-m bg-a\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'button-m bg-a\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsButtonL\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'button-l bg-a\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'button-l bg-a\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsButtonDarkS\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'button-s bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'button-s bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsButtonDarkM\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'button-m bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'button-m bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsButtonDarkL\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'button-l bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'button-l bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsRoundButtonS\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-s bg-a\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-s bg-a\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsRoundButtonM\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-m bg-a\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-m bg-a\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsRoundButtonL\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-l bg-a\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-l bg-a\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsRoundButtonDarkS\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-s bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-s bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsRoundButtonDarkM\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-m bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-m bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n    <ng-container *ngIf="view ===\'combinationsRoundButtonDarkL\'">\n        <div class="flex-container v-layout">\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w250">\n                    <ng-container *ngTemplateOutlet="vCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-l bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n\n            <div class="flex-container h-layout"\n                *ngFor="let values of samples.COMBINATIONS">\n                <div class="specimen-container w300">\n                    <ng-container *ngTemplateOutlet="hCombination; context: { $implicit: { values: values, butttonStyle: \'round-button-l bg-dark fg-dark\' } }"></ng-container>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n\n\n    <ng-template #vCombination let-obj>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-small">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line mono-small">{{ obj.values[0] }}</div>\n                <div class="single-line sans-small">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line mono-small">{{ obj.values[0] }}</div>\n                <div class="single-line sans-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line mono-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line mono-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-small">{{ obj.values[0] }}</div>\n                <div class="single-line sans-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line mono-small">{{ obj.values[0] }}</div>\n                <div class="single-line sans-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-large">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-large">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium-bold">{{ obj.values[0] }}</div>\n                <div class="single-line mono-large">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line sans-large">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line sans-large-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-large">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-large-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line serif-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-large">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line serif-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-large-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line serif-large">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="fixed-container v-layout v-gap-s w100p align-start {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line serif-large-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n    </ng-template>\n\n\n\n    <ng-template #hCombination let-obj>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-small">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line mono-small">{{ obj.values[0] }}</div>\n                <div class="single-line sans-small">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line mono-small">{{ obj.values[0] }}</div>\n                <div class="single-line sans-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line mono-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line mono-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-small">{{ obj.values[0] }}</div>\n                <div class="single-line sans-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line mono-small">{{ obj.values[0] }}</div>\n                <div class="single-line sans-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-small">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium-bold">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line sans-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line sans-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line serif-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line serif-medium">{{ obj.values[0] }}</div>\n                <div class="single-line mono-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line serif-medium">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n        <div class="specimen">\n            <div class="flex-container align-center h-layout h-gap-s {{ obj.butttonStyle }}">\n                <div class="single-line sans-medium">{{ obj.values[0] }}</div>\n                <div class="single-line serif-medium-bold">{{ obj.values[1] }}</div>\n            </div>\n        </div>\n    </ng-template>\n</div>'}),(0,tslib_es6.Sn)("design:paramtypes",[style_configurator_service.W,sample_data_sets.e])],TypingsComponent);const typings_stories={title:"Shared/Styles/Foundation/Typings",component:TypingsComponent,tags:["autodocs"],argTypes:{},decorators:[(0,dist.moduleMetadata)({imports:[storybook_shared_module.c]}),(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(storybook_shared_module.c),(0,core.importProvidersFrom)(http.q1)]})]},styles={args:{view:"styles"}},list={args:{view:"list"}},combinations={args:{view:"combinations"}},combinationsChipS={args:{view:"combinationsChipS"}},combinationsChipM={args:{view:"combinationsChipM"}},combinationsChipL={args:{view:"combinationsChipL"}},combinationsChipDarkS={args:{view:"combinationsChipDarkS"}},combinationsChipDarkM={args:{view:"combinationsChipDarkM"}},combinationsChipDarkL={args:{view:"combinationsChipDarkL"}},combinationsButtonS={args:{view:"combinationsButtonS"}},combinationsButtonM={args:{view:"combinationsButtonM"}},combinationsButtonL={args:{view:"combinationsButtonL"}},combinationsButtonDarkS={args:{view:"combinationsButtonDarkS"}},combinationsButtonDarkM={args:{view:"combinationsButtonDarkM"}},combinationsButtonDarkL={args:{view:"combinationsButtonDarkL"}},combinationsRoundButtonS={args:{view:"combinationsRoundButtonS"}},combinationsRoundButtonM={args:{view:"combinationsRoundButtonM"}},combinationsRoundButtonL={args:{view:"combinationsRoundButtonL"}},combinationsRoundButtonDarkS={args:{view:"combinationsRoundButtonDarkS"}},combinationsRoundButtonDarkM={args:{view:"combinationsRoundButtonDarkM"}},combinationsRoundButtonDarkL={args:{view:"combinationsRoundButtonDarkL"}};styles.parameters={...styles.parameters,docs:{...styles.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'styles'\n  }\n}",...styles.parameters?.docs?.source}}},list.parameters={...list.parameters,docs:{...list.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'list'\n  }\n}",...list.parameters?.docs?.source}}},combinations.parameters={...combinations.parameters,docs:{...combinations.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinations'\n  }\n}",...combinations.parameters?.docs?.source}}},combinationsChipS.parameters={...combinationsChipS.parameters,docs:{...combinationsChipS.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsChipS'\n  }\n}",...combinationsChipS.parameters?.docs?.source}}},combinationsChipM.parameters={...combinationsChipM.parameters,docs:{...combinationsChipM.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsChipM'\n  }\n}",...combinationsChipM.parameters?.docs?.source}}},combinationsChipL.parameters={...combinationsChipL.parameters,docs:{...combinationsChipL.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsChipL'\n  }\n}",...combinationsChipL.parameters?.docs?.source}}},combinationsChipDarkS.parameters={...combinationsChipDarkS.parameters,docs:{...combinationsChipDarkS.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsChipDarkS'\n  }\n}",...combinationsChipDarkS.parameters?.docs?.source}}},combinationsChipDarkM.parameters={...combinationsChipDarkM.parameters,docs:{...combinationsChipDarkM.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsChipDarkM'\n  }\n}",...combinationsChipDarkM.parameters?.docs?.source}}},combinationsChipDarkL.parameters={...combinationsChipDarkL.parameters,docs:{...combinationsChipDarkL.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsChipDarkL'\n  }\n}",...combinationsChipDarkL.parameters?.docs?.source}}},combinationsButtonS.parameters={...combinationsButtonS.parameters,docs:{...combinationsButtonS.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsButtonS'\n  }\n}",...combinationsButtonS.parameters?.docs?.source}}},combinationsButtonM.parameters={...combinationsButtonM.parameters,docs:{...combinationsButtonM.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsButtonM'\n  }\n}",...combinationsButtonM.parameters?.docs?.source}}},combinationsButtonL.parameters={...combinationsButtonL.parameters,docs:{...combinationsButtonL.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsButtonL'\n  }\n}",...combinationsButtonL.parameters?.docs?.source}}},combinationsButtonDarkS.parameters={...combinationsButtonDarkS.parameters,docs:{...combinationsButtonDarkS.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsButtonDarkS'\n  }\n}",...combinationsButtonDarkS.parameters?.docs?.source}}},combinationsButtonDarkM.parameters={...combinationsButtonDarkM.parameters,docs:{...combinationsButtonDarkM.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsButtonDarkM'\n  }\n}",...combinationsButtonDarkM.parameters?.docs?.source}}},combinationsButtonDarkL.parameters={...combinationsButtonDarkL.parameters,docs:{...combinationsButtonDarkL.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsButtonDarkL'\n  }\n}",...combinationsButtonDarkL.parameters?.docs?.source}}},combinationsRoundButtonS.parameters={...combinationsRoundButtonS.parameters,docs:{...combinationsRoundButtonS.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsRoundButtonS'\n  }\n}",...combinationsRoundButtonS.parameters?.docs?.source}}},combinationsRoundButtonM.parameters={...combinationsRoundButtonM.parameters,docs:{...combinationsRoundButtonM.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsRoundButtonM'\n  }\n}",...combinationsRoundButtonM.parameters?.docs?.source}}},combinationsRoundButtonL.parameters={...combinationsRoundButtonL.parameters,docs:{...combinationsRoundButtonL.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsRoundButtonL'\n  }\n}",...combinationsRoundButtonL.parameters?.docs?.source}}},combinationsRoundButtonDarkS.parameters={...combinationsRoundButtonDarkS.parameters,docs:{...combinationsRoundButtonDarkS.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsRoundButtonDarkS'\n  }\n}",...combinationsRoundButtonDarkS.parameters?.docs?.source}}},combinationsRoundButtonDarkM.parameters={...combinationsRoundButtonDarkM.parameters,docs:{...combinationsRoundButtonDarkM.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsRoundButtonDarkM'\n  }\n}",...combinationsRoundButtonDarkM.parameters?.docs?.source}}},combinationsRoundButtonDarkL.parameters={...combinationsRoundButtonDarkL.parameters,docs:{...combinationsRoundButtonDarkL.parameters?.docs,source:{originalSource:"{\n  args: {\n    view: 'combinationsRoundButtonDarkL'\n  }\n}",...combinationsRoundButtonDarkL.parameters?.docs?.source}}};const __namedExportsOrder=["styles","list","combinations","combinationsChipS","combinationsChipM","combinationsChipL","combinationsChipDarkS","combinationsChipDarkM","combinationsChipDarkL","combinationsButtonS","combinationsButtonM","combinationsButtonL","combinationsButtonDarkS","combinationsButtonDarkM","combinationsButtonDarkL","combinationsRoundButtonS","combinationsRoundButtonM","combinationsRoundButtonL","combinationsRoundButtonDarkS","combinationsRoundButtonDarkM","combinationsRoundButtonDarkL"]}}]);